ACTION PLAN:

1) SERVER
-- Setup and Resolvers for:
---- type queries
-- -- -- me: which returns a User type
-- -- type mutations
-- -- -- login: accepts an email and password as parameters; returns an Auth type
-- -- -- addUser: accepts a username, email, and password as parameters; returns an Auth type
-- -- -- saveBook: accepts a book author's array, description, title, bookId, image, and link as parameters; returns a User type
-- -- -- removeBook: accepts a book's bookId as a parameter; returns a User type
-- -- type Auth
-- -- -- token
-- -- -- user (references the User type)

2) CLIENT
-- queries.js
-- -- holds the query GET_ME, which will execute the 'me' query set up using Apollo SERVER
-- mutations.js 
-- -- LOGIN_USER will execute the loginUser mutation 
-- -- ADD_USER will execute the addUser mutation
-- -- SAVE_BOOK will execute the saveBook mutation
-- -- REMOVE_BOOK will execute the removeBook mutation

-- App.js 
-- -- Create an ApolloProvider to make every request work with the Apollo server
-- SearchBooks.js
-- -- use the Apollo useMutation() hook to execute the SAVE_BOOK mutation in the handleSaveBook() function instead of the saveBook() function imported from the API file
-- -- make sure to keep the logic for saving the book's ID to state in the try...catch block
-- SavedBooks.js
-- -- Remove the useEffect() Hook that sets the state for UserData
-- -- Instead, use the useQuery() hook to execute the GET_ME query on load and save it to a variable name UserData
-- -- Use the useMutation() hook to execute the REMOVE_BOOK mutation in the handleDeleteBook() function instead of the deleteBook() function that's imported from API file (make sure to keep the removeBookId() function in place)
-- signupForm.js
-- -- replace the addUser() functionality imported from the API file with the ADD_USER mutation functionality
-- loginForm.js
-- -- replace the loginUser() functionality imported from the API file with the LOGIN_USER mutation functionality